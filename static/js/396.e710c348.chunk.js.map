{"version":3,"file":"static/js/396.e710c348.chunk.js","mappings":"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","sources":["../node_modules/alchemy-sdk/src/internal/request-batcher.ts","../node_modules/alchemy-sdk/src/api/alchemy-provider.ts","../node_modules/alchemy-sdk/src/internal/websocket-backfiller.ts","../node_modules/alchemy-sdk/src/api/alchemy-websocket-provider.ts","../node_modules/es5-ext/global.js","../node_modules/sturdy-websocket/src/index.ts","../node_modules/websocket/lib/browser.js","../node_modules/websocket/lib/version.js"],"sourcesContent":["import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = {\n      ...this.connection,\n      headers: {\n        ...this.connection.headers,\n        'Alchemy-Ethers-Sdk-Method': 'batchSend'\n      }\n    };\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n","import { AlchemyWebSocketProvider } from '../api/alchemy-websocket-provider';\nimport { fromHex, toHex } from '../api/util';\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/** The return type of eth_getBlocksByHash. */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\nexport interface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\ninterface CommonAncestor {\n  blockNumber: number;\n  logIndex: number;\n}\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The WebsocketBackfiller fetches events that were sent since a provided block\n * number. This is used in the {@link AlchemyWebSocketProvider} to backfill\n * events that were transmitted while the websocket connection was down.\n *\n * The backfiller backfills two main eth_subscribe events: `logs` and `newHeads`.\n *\n * @internal\n */\nexport class WebsocketBackfiller {\n  // TODO: Use HTTP provider to do backfill.\n  private maxBackfillBlocks = MAX_BACKFILL_BLOCKS;\n  constructor(private readonly provider: AlchemyWebSocketProvider) {}\n\n  /**\n   * Runs backfill for `newHeads` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param previousHeads Previous head requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   * @returns A list of `newHeads` events that were sent since the last backfill.\n   */\n  async getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous heads to fetch, return new heads since\n    // `fromBlockNumber`, or up to maxBackfillBlocks from the current head.\n    if (previousHeads.length === 0) {\n      return this.getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted event is too far back in the past, there's no need\n    // to backfill for reorgs. Just fetch the last `maxBackfillBlocks` worth of\n    // new heads.\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber <= minBlockNumber) {\n      return this.getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n\n    // To capture all `newHeads` events, return all head events from the last\n    // seen block number to current + any of the previous heads that were re-orged.\n    const reorgHeads: NewHeadsEvent[] = await this.getReorgHeads(\n      isCancelled,\n      previousHeads\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await this.getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  /**\n   * Runs backfill for `logs` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param filter The filter object that accompanies a logs subscription.\n   * @param previousLogs Previous log requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   */\n  async getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous logs to fetch, return new logs since\n    // `fromBlockNumber`, or up to `maxBackfillBlocks` from the current head.\n    if (previousLogs.length === 0) {\n      return this.getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted log is too far back in the past, there's no need\n    // to backfill for removed logs. Just fetch the last `maxBackfillBlocks`\n    // worth of logs.\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return this.getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n\n    // Return all log events that have happened along with log events that have\n    // been removed due to a chain reorg.\n    const commonAncestor = await this.getCommonAncestor(\n      isCancelled,\n      previousLogs\n    );\n    throwIfCancelled(isCancelled);\n\n    // All previous logs with a block number greater than the common ancestor\n    // were part of a re-org, so mark them as such.\n    const removedLogs = previousLogs\n      .filter(log => fromHex(log.blockNumber) > commonAncestor.blockNumber)\n      .map(log => ({ ...log, removed: true }));\n\n    // If no common ancestor was found, start backfill from the oldest log's\n    // block number.\n    const fromBlockInclusive =\n      commonAncestor.blockNumber === Number.NEGATIVE_INFINITY\n        ? fromHex(previousLogs[0].blockNumber)\n        : commonAncestor.blockNumber;\n    let addedLogs = await this.getLogsInRange(\n      filter,\n      fromBlockInclusive,\n      toBlockNumber + 1\n    );\n\n    // De-dupe any logs that were already emitted.\n    addedLogs = addedLogs.filter(\n      log =>\n        log &&\n        (fromHex(log.blockNumber) > commonAncestor.blockNumber ||\n          fromHex(log.logIndex) > commonAncestor.logIndex)\n    );\n\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  /**\n   * Sets a new max backfill blocks. VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  setMaxBackfillBlock(newMax: number): void {\n    this.maxBackfillBlocks = newMax;\n  }\n\n  /**\n   * Gets the current block number as a number.\n   *\n   * @private\n   */\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.provider.send('eth_blockNumber');\n    return fromHex(blockNumberHex);\n  }\n\n  /**\n   * Gets all `newHead` events in the provided range. Note that the returned\n   * heads do not include re-orged heads. Use {@link getReorgHeads} to find heads\n   * that were part of a re-org.\n   *\n   * @private\n   */\n  private async getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const batchParts: BatchPart[] = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: 'eth_getBlockByNumber',\n        params: [toHex(i), false]\n      });\n    }\n\n    // TODO: handle errors\n    const blockHeads = await this.provider.sendBatch(batchParts);\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  /**\n   * Returns all heads that were part of a reorg event.\n   *\n   * @private\n   */\n  private async getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[]\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await this.getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n\n      // If the hashes match, then current head in the iteration was not re-orged.\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  /**\n   * Simple wrapper around `eth_getBlockByNumber` that returns the complete\n   * block information for the provided block number.\n   *\n   * @private\n   */\n  private async getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return this.provider.send('eth_getBlockByNumber', [\n      toHex(blockNumber),\n      false\n    ]);\n  }\n\n  /**\n   * Given a list of previous log events, finds the common block number from the\n   * logs that matches the block head.\n   *\n   * This can be used to identify which logs are part of a re-org.\n   *\n   * Returns 1 less than the oldest log's block number if no common ancestor was found.\n   *\n   * @private\n   */\n  private async getCommonAncestor(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[]\n  ): Promise<CommonAncestor> {\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    let blockHead = await this.getBlockByNumber(\n      fromHex(previousLogs[previousLogs.length - 1].blockNumber)\n    );\n    throwIfCancelled(isCancelled);\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const oldLog = previousLogs[i];\n\n      // Ensure that updated blocks are fetched every time the log's block number\n      // changes.\n      if (oldLog.blockNumber !== blockHead.number) {\n        blockHead = await this.getBlockByNumber(fromHex(oldLog.blockNumber));\n      }\n\n      // Since logs are ordered in ascending order, the first log that matches\n      // the hash should be the largest logIndex.\n      if (oldLog.blockHash === blockHead.hash) {\n        return {\n          blockNumber: fromHex(oldLog.blockNumber),\n          logIndex: fromHex(oldLog.logIndex)\n        };\n      }\n    }\n    return {\n      blockNumber: Number.NEGATIVE_INFINITY,\n      logIndex: Number.NEGATIVE_INFINITY\n    };\n  }\n\n  /**\n   * Gets all `logs` events in the provided range. Note that the returned logs\n   * do not include removed logs.\n   *\n   * @private\n   */ private async getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1)\n    };\n    return this.provider.send('eth_getLogs', [rangeFilter]);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, event => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, event => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach(item => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n\nconst CANCELLED = new Error('Cancelled');\nexport function throwIfCancelled(isCancelled: () => boolean): void {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\n","import SturdyWebSocket from 'sturdy-websocket';\n\nimport { Listener } from '@ethersproject/abstract-provider';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport {\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { Network as NetworkFromEthers } from '@ethersproject/networks/lib/types';\nimport {\n  CommunityResourcable,\n  WebSocketProvider\n} from '@ethersproject/providers';\n\nimport {\n  EthersEvent,\n  getAlchemyEventTag,\n  isAlchemyEvent,\n  verifyAlchemyEventName\n} from '../internal/ethers-event';\nimport {\n  ALCHEMY_EVENT_TYPES,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  WebSocketMessage\n} from '../internal/internal-types';\nimport {\n  BatchPart,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  NewHeadsEvent,\n  WebsocketBackfiller,\n  dedupeLogs,\n  dedupeNewHeads,\n  throwIfCancelled\n} from '../internal/websocket-backfiller';\nimport { AlchemyEventType, AlchemySubscription } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  EthersNetwork,\n  noop\n} from '../util/const';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\nimport { AlchemyProvider } from './alchemy-provider';\nimport { fromHex } from './util';\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * SDK's custom implementation fo the ethers.js's 'AlchemyWebSocketProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getWebSocketProvider()}.\n *\n * @public\n */\nexport class AlchemyWebSocketProvider\n  extends WebSocketProvider\n  implements CommunityResourcable\n{\n  _events: Array<EthersEvent> = [];\n  readonly apiKey: string;\n\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  /** @internal */\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  /** @internal */\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  /** @internal */\n  private readonly backfiller: WebsocketBackfiller;\n  /** @internal */\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  /** @internal */\n  private cancelBackfill: () => void;\n\n  /** @internal */\n  constructor(config: AlchemyConfig, wsConstructor?: any) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'wss'\n    );\n\n    const protocol = `alchemy-sdk-${VERSION}`;\n\n    // Use the provided config URL override if it exists, otherwise use the created one.\n    const ws = new SturdyWebSocket(config.url ?? connection.url, protocol, {\n      wsConstructor: wsConstructor ?? getWebsocketConstructor()\n    });\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(ws as any, ethersNetwork);\n    this.apiKey = apiKey;\n\n    // Start heartbeat and backfiller for the websocket connection.\n    this.backfiller = new WebsocketBackfiller(this);\n    this.addSocketListeners();\n    this.startHeartbeat();\n    this.cancelBackfill = noop;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based subscriptions.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based\n   * subscriptions. Adds a listener to the triggered for only the next\n   * {@link eventName} event, after which it will be removed.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName Event to unlisten to.\n   * @param listener The listener function to remove.\n   * @override\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (isAlchemyEvent(eventName)) {\n      return this._off(eventName, listener);\n    } else {\n      return super.off(eventName, listener);\n    }\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @override\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._removeAllListeners(eventName);\n    } else {\n      return super.removeAllListeners(eventName);\n    }\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   * @override\n   */\n  listenerCount(eventName?: AlchemyEventType): number {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listenerCount(eventName);\n    } else {\n      return super.listenerCount(eventName);\n    }\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   * @public\n   * @override\n   */\n  listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listeners(eventName);\n    } else {\n      return super.listeners(eventName);\n    }\n  }\n\n  /**\n   * Overrides the method in `BaseProvider` in order to properly format the\n   * Alchemy subscription events.\n   *\n   * @internal\n   * @override\n   */\n  _addEventListener(\n    eventName: AlchemyEventType,\n    listener: Listener,\n    once: boolean\n  ): this {\n    if (isAlchemyEvent(eventName)) {\n      verifyAlchemyEventName(eventName);\n      const event = new EthersEvent(\n        getAlchemyEventTag(eventName),\n        listener,\n        once\n      );\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    } else {\n      return super._addEventListener(eventName, listener, once);\n    }\n  }\n\n  /**\n   * Overrides the `_startEvent()` method in ethers.js's\n   * {@link WebSocketProvider} to include additional alchemy methods.\n   *\n   * @param event\n   * @override\n   * @internal\n   */\n  _startEvent(event: EthersEvent): void {\n    // Check if the event type is a custom Alchemy subscription.\n    const customLogicTypes = [...ALCHEMY_EVENT_TYPES, 'block', 'filter'];\n    if (customLogicTypes.includes(event.type)) {\n      this.customStartEvent(event);\n    } else {\n      super._startEvent(event);\n    }\n  }\n\n  /**\n   * Overridden from ethers.js's {@link WebSocketProvider}\n   *\n   * Modified in order to add mappings for backfilling.\n   *\n   * @internal\n   * @override\n   */\n  async _subscribe(\n    tag: string,\n    param: Array<any>,\n    processFunc: (result: any) => void,\n    event?: EthersEvent\n  ): Promise<void> {\n    let subIdPromise = this._subIds[tag];\n\n    // BEGIN MODIFIED CODE\n    const startingBlockNumber = await this.getBlockNumber();\n    // END MODIFIED CODE\n\n    if (subIdPromise == null) {\n      subIdPromise = Promise.all(param).then(param => {\n        return this.send('eth_subscribe', param);\n      });\n      this._subIds[tag] = subIdPromise;\n    }\n    const subId = await subIdPromise;\n\n    // BEGIN MODIFIED CODE\n    const resolvedParams = await Promise.all(param);\n    this.virtualSubscriptionsById.set(subId, {\n      event: event!,\n      method: 'eth_subscribe',\n      params: resolvedParams,\n      startingBlockNumber,\n      virtualId: subId,\n      physicalId: subId,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: []\n    });\n    this.virtualIdsByPhysicalId.set(subId, subId);\n\n    // END MODIFIED CODE\n\n    this._subs[subId] = { tag, processFunc };\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @internal\n   * @override\n   */\n  emit(eventName: AlchemyEventType, ...args: Array<any>): boolean {\n    if (isAlchemyEvent(eventName)) {\n      let result = false;\n\n      const stopped: Array<EthersEvent> = [];\n\n      // This line is the only modified line from the original method.\n      const eventTag = getAlchemyEventTag(eventName);\n\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(() => {\n          event.listener.apply(this, args);\n        }, 0);\n\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n\n      stopped.forEach(event => {\n        this._stopEvent(event);\n      });\n\n      return result;\n    } else {\n      return super.emit(eventName, ...args);\n    }\n  }\n\n  /** @internal */\n  async sendBatch(parts: BatchPart[]): Promise<any[]> {\n    let nextId = 0;\n    const payload: JsonRpcRequest[] = parts.map(({ method, params }) => {\n      return {\n        method,\n        params,\n        jsonrpc: '2.0',\n        id: `alchemy-sdk:${nextId++}`\n      };\n    });\n\n    return this.sendBatchConcurrently(payload);\n  }\n\n  /** @override */\n  destroy(): Promise<void> {\n    this.removeSocketListeners();\n    this.stopHeartbeatAndBackfill();\n    return super.destroy();\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `WebSocketProvider._stopEvent()`.\n   *\n   * This method is copied over directly in order to support Alchemy's\n   * subscription type by allowing the provider to properly stop Alchemy's\n   * subscription events.\n   *\n   * @internal\n   */\n  _stopEvent(event: EthersEvent): void {\n    let tag = event.tag;\n\n    // START MODIFIED CODE\n    if (ALCHEMY_EVENT_TYPES.includes(event.type)) {\n      // There are remaining pending transaction listeners.\n      if (\n        this._events.filter(e => ALCHEMY_EVENT_TYPES.includes(e.type)).length\n      ) {\n        return;\n      }\n      // END MODIFIED CODE\n    } else if (event.type === 'tx') {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === 'tx').length) {\n        return;\n      }\n      tag = 'tx';\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    void subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      void this.send('eth_unsubscribe', [subId]);\n    });\n  }\n\n  /** @internal */\n  private addSocketListeners(): void {\n    this._websocket.addEventListener('message', this.handleMessage);\n    this._websocket.addEventListener('reopen', this.handleReopen);\n    this._websocket.addEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /** @internal */\n  private removeSocketListeners(): void {\n    this._websocket.removeEventListener('message', this.handleMessage);\n    this._websocket.removeEventListener('reopen', this.handleReopen);\n    this._websocket.removeEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /**\n   * The underlying ethers {@link WebSocketProvider} already handles and emits\n   * messages. To allow backfilling, track all messages that are emitted.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== 'eth_subscribe') {\n      return;\n    }\n\n    switch (subscription.params[0]) {\n      case 'newHeads': {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        } else {\n          // Ethers subscription mapping will emit the event, just store it.\n          this.rememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        }\n        break;\n      }\n      case 'logs': {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else if (virtualId !== physicalId) {\n          this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n        } else {\n          this.rememberEvent(virtualId, result, getLogsBlockNumber);\n        }\n        break;\n      }\n      default:\n        if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          const { result } = (message as SubscriptionEvent<unknown>).params;\n          this.emitEvent(virtualId, result);\n        }\n    }\n  };\n\n  /**\n   * When the websocket connection reopens:\n   *\n   * 1. Resubscribe to all existing subscriptions and start backfilling\n   * 2. Restart heart beat.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleReopen = () => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      void (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  /**\n   * Reopens the backfill based on\n   *\n   * @param isCancelled\n   * @param subscription\n   * @internal\n   */\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case 'newHeads': {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case 'logs': {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  /**\n   * Cancels the heartbeat and any pending backfills being performed. This is\n   * called when the websocket connection goes down or is disconnected.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private stopHeartbeatAndBackfill = () => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  /** @internal */\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  /** @internal */\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   *\n   * @internal\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    this.rememberEvent(virtualId, result, getBlockNumber);\n    this.emitEvent(virtualId, result);\n  }\n\n  private emitEvent<T>(virtualId: string, result: T): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    this.emitGenericEvent(subscription, result);\n  }\n\n  /** @internal */\n  private rememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber\n    );\n  }\n\n  /** @internal */\n  private emitGenericEvent(\n    subscription: VirtualSubscription,\n    result: any\n  ): void {\n    const emitFunction = this.emitProcessFn(subscription.event);\n    emitFunction(result);\n  }\n\n  /**\n   * Starts a heartbeat that pings the websocket server periodically to ensure\n   * that the connection stays open.\n   *\n   * @internal\n   */\n  private startHeartbeat(): void {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(this.send('net_version'), HEARTBEAT_WAIT_TIME);\n      } catch {\n        this._websocket.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * This method sends the batch concurrently as individual requests rather than\n   * as a batch, which was the original implementation. The original batch logic\n   * is preserved in this implementation in order for faster porting.\n   *\n   * @param payload\n   * @internal\n   */\n  // TODO(cleanup): Refactor and remove usages of `sendBatch()`.\n  // TODO(errors): Use allSettled() once we have more error handling.\n  private async sendBatchConcurrently(\n    payload: JsonRpcRequest[]\n  ): Promise<unknown[]> {\n    return Promise.all(payload.map(req => this.send(req.method, req.params)));\n  }\n\n  /** @internal */\n  private customStartEvent(event: EthersEvent): void {\n    if (event.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      const { fromAddress, toAddress, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.PENDING_TRANSACTIONS,\n          { fromAddress, toAddress, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      const { addresses, includeRemoved, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.MINED_TRANSACTIONS,\n          { addresses, includeRemoved, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'block') {\n      void this._subscribe(\n        'block',\n        ['newHeads'],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'filter') {\n      void this._subscribe(\n        event.tag,\n        ['logs', this._getFilter(event.filter)],\n        this.emitProcessFn(event),\n        event\n      );\n    }\n  }\n\n  /** @internal */\n  private emitProcessFn(event: EthersEvent): (result: any) => void {\n    switch (event.type) {\n      case ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.PENDING_TRANSACTIONS,\n              fromAddress: event.fromAddress,\n              toAddress: event.toAddress,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.MINED_TRANSACTIONS,\n              addresses: event.addresses,\n              includeRemoved: event.includeRemoved,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case 'block':\n        return result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit('block', blockNumber);\n        };\n      case 'filter':\n        return result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        };\n      default:\n        throw new Error('Invalid event type to `emitProcessFn()`');\n    }\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.off()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped: Array<EthersEvent> = [];\n\n    let found = false;\n    const eventTag = getAlchemyEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.removeAllListeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _removeAllListeners(eventName: AlchemyEventType): this {\n    let stopped: Array<EthersEvent> = [];\n    if (eventName == null) {\n      stopped = this._events;\n\n      this._events = [];\n    } else {\n      const eventTag = getAlchemyEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listenerCount()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listenerCount(eventName?: AlchemyEventType): number {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events\n      .filter(event => event.tag === eventTag)\n      .map(event => event.listener);\n  }\n}\n\nfunction getWebsocketConstructor(): any {\n  return isNodeEnvironment() ? require('websocket').w3cwebsocket : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\n/** @internal */\ninterface CancelToken {\n  cancel(): void;\n  isCancelled(): boolean;\n}\n\ninterface VirtualSubscription {\n  event: EthersEvent;\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\ninterface NewHeadsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['newHeads'];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\ninterface LogsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['logs', LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\n// TODO(cleanup): Use class variable rather than passing `isCancelled` everywhere.\nfunction makeCancelToken(): CancelToken {\n  let cancelled = false;\n  return { cancel: () => (cancelled = true), isCancelled: () => cancelled };\n}\n\n// TODO(cleanup): replace with SDK's backoff implementation\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\n\nasync function withBackoffRetries<T>(\n  f: () => Promise<T>,\n  retryCount: number,\n  shouldRetry: (error: unknown) => boolean = () => true\n): Promise<T> {\n  let nextWaitTime = 0;\n  let i = 0;\n  while (true) {\n    try {\n      return await f();\n    } catch (error) {\n      i++;\n      if (i >= retryCount || !shouldRetry(error)) {\n        throw error;\n      }\n      await delay(nextWaitTime);\n      if (!shouldRetry(error)) {\n        throw error;\n      }\n      nextWaitTime =\n        nextWaitTime === 0\n          ? MIN_RETRY_DELAY\n          : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n    }\n  }\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error('Timeout')), ms)\n    )\n  ]);\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction isResponse(\n  message: WebSocketMessage\n): message is SingleOrBatchResponse {\n  return (\n    Array.isArray(message) ||\n    (message.jsonrpc === '2.0' && (message as JsonRpcResponse).id !== undefined)\n  );\n}\n\nfunction isSubscriptionEvent(\n  message: WebSocketMessage\n): message is SubscriptionEvent {\n  return !isResponse(message);\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which are so old\n * that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    e => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n","var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n","export interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (url: string, protocols?: string | string[]) => any;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent | undefined) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options: Options = {},\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public reconnect(): void {\n        if (this.isClosed) {\n            throw new Error(\n                \"Cannot call reconnect() on socket which is permanently closed.\",\n            );\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws: WebSocket = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            this.disposeSocket();\n            this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent | undefined): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent | undefined,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reestablishConnection(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(\n        event: CloseEvent | undefined,\n        debugReason: string,\n    ): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    }\n\n    private disposeSocket(closeCode?: number, reason?: string): void {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction applyDefaultOptions(options: Options): Required<Options> {\n    const result: any = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(key => {\n        const value = (options as any)[key];\n        result[key] =\n            value === undefined\n                ? (SturdyWebSocket.DEFAULT_OPTIONS as any)[key]\n                : value;\n    });\n    return result;\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n\nfunction noop(): void {\n    // Nothing.\n}\n","var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n","module.exports = require('../package.json').version;\n"],"names":["RequestBatcher","constructor","sendBatchFn","maxBatchSize","enqueueRequest","request","inflightRequest","resolve","undefined","reject","promise","Promise","this","pendingBatch","push","length","sendBatchRequest","pendingBatchTimer","setTimeout","batch","clearTimeout","map","inflight","then","result","forEach","index","payload","error","Error","message","code","data","AlchemyProvider","JsonRpcProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","network","connection","getAlchemyConnectionInfo","url","throttleLimit","maxRetries","super","EthersNetwork","batchRequests","batcherConnection","Object","headers","batcher","requests","fetchJson","JSON","stringify","static","DEFAULT_ALCHEMY_API_KEY","CustomNetworks","getNetworkFromEthers","DEFAULT_NETWORK","values","Network","includes","join","type","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","allowGzip","detectNetwork","_super","_startPending","logWarn","isCommunityResource","send","method","params","_send","methodName","forceBatch","id","_nextId","jsonrpc","emit","action","deepCopy","provider","cache","indexOf","_cache","getResult","response","WebsocketBackfiller","getNewHeadsBackfill","isCancelled","previousHeads","fromBlockNumber","throwIfCancelled","toBlockNumber","getBlockNumber","getHeadEventsInRange","Math","max","maxBackfillBlocks","lastSeenBlockNumber","fromHex","number","minBlockNumber","reorgHeads","getReorgHeads","intermediateHeads","getLogsBackfill","filter","previousLogs","getLogsInRange","blockNumber","commonAncestor","getCommonAncestor","removedLogs","log","removed","fromBlockInclusive","Number","NEGATIVE_INFINITY","addedLogs","logIndex","setMaxBackfillBlock","newMax","blockNumberHex","toBlockExclusive","batchParts","i","toHex","sendBatch","toNewHeadsEvent","oldEvent","blockHead","getBlockByNumber","hash","reverse","oldLog","blockHash","rangeFilter","fromBlock","toBlock","head","totalDifficulty","transactions","uncles","dedupe","items","getKey","keysSeen","Set","item","key","has","add","CANCELLED","AlchemyWebSocketProvider","WebSocketProvider","wsConstructor","protocol","V","SturdyWebSocket","process","versions","node","require","WebSocket","virtualSubscriptionsById","Map","virtualIdsByPhysicalId","handleMessage","event","parse","Array","isArray","isResponse","isSubscriptionEvent","physicalId","subscription","virtualId","get","newHeadsSubscription","newHeadsMessage","isBackfilling","backfillBuffer","pastEvents","addToPastEventsBuffer","getNewHeadsBlockNumber","addToNewHeadsEventsBuffer","emitAndRememberEvent","rememberEvent","logsSubscription","logsMessage","getLogsBlockNumber","addToLogsEventsBuffer","emitEvent","clear","cancel","cancelled","makeCancelToken","cancelBackfill","__awaiter","resubscribeAndBackfill","console","startHeartbeat","heartbeatIntervalId","clearInterval","backfiller","addSocketListeners","noop","on","eventName","listener","_addEventListener","once","off","isAlchemyEvent","_off","removeAllListeners","_removeAllListeners","listenerCount","_listenerCount","listeners","_listeners","verifyAlchemyEventName","EthersEvent","getAlchemyEventTag","_events","_startEvent","ALCHEMY_EVENT_TYPES","customStartEvent","_subscribe","tag","param","processFunc","subIdPromise","_subIds","startingBlockNumber","all","subId","resolvedParams","set","sentEvents","_subs","args","stopped","eventTag","apply","_stopEvent","parts","nextId","sendBatchConcurrently","destroy","removeSocketListeners","stopHeartbeatAndBackfill","e","_websocket","addEventListener","handleReopen","removeEventListener","backfillEvents","withBackoffRetries","withTimeout","events","dedupeNewHeads","emitNewHeadsEvent","dedupeLogs","emitLogsEvent","emitGenericEvent","emitProcessFn","emitFunction","setInterval","_a","reconnect","req","ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE","fromAddress","toAddress","hashesOnly","AlchemySubscription","ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE","addresses","includeRemoved","_getFilter","BigNumber","toNumber","_emitted","block","formatter","filterLog","found","f","retryCount","shouldRetry","nextWaitTime","delay","min","ms","race","_","currentBlockNumber","firstGoodIndex","findIndex","splice","naiveFallback","self","window","module","exports","globalThis","defineProperty","prototype","configurable","__global__","protocolsOrOptions","options","onclose","onerror","onmessage","onopen","ondown","onreopen","CONNECTING","OPEN","CLOSING","CLOSED","hasBeenOpened","isClosed","messageBuffer","nextRetryTime","reconnectCount","lastKnownExtensions","lastKnownProtocol","protocols","applyDefaultOptions","openNewWebSocket","binaryTypeInternal","binaryType","ws","sum","bufferedAmount","hasUnknownAmount","byteLength","ArrayBuffer","Blob","size","getDataByteLength","debugLog","extensions","reason","disposeSocket","shutdown","readyState","handleClose","dispatchEventOfType","l","connectTimeout","handleError","handleOpen","connectTimeoutId","_this","clearConnectTimeout","allClearResetTime","allClearTimeoutId","clearAllClearTimeout","openTime","maxReconnectAttempts","shouldReconnect","stopReconnecting","getTooManyFailedReconnectsMessage","willReconnect","handleWillReconnect","willReconnectResolved","denialReason","reestablishConnection","minReconnectDelay","maxReconnectDelay","reconnectBackoffFactor","retryTime","retryTimeSeconds","debugReason","clearAllTimeouts","closeCode","close","slice","callListener","defaultPrevented","call","handleEvent","debug","s","POSITIVE_INFINITY","keys","DEFAULT_OPTIONS","value","_globalThis","NativeWebSocket","MozWebSocket","websocket_version","W3CWebSocket","uri","prop"],"sourceRoot":""}