{"version":3,"file":"static/js/970.6e0594cc.chunk.js","mappings":"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","sources":["../node_modules/@ledgerhq/cryptoassets/src/data/evm/index.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/contracts.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/erc20.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/index.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/loadConfig.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/nfts.ts","../node_modules/@ledgerhq/hw-app-eth/src/utils.ts","../node_modules/@ledgerhq/hw-app-eth/node_modules/bignumber.js/bignumber.js"],"sourcesContent":["import arbitrum_tokens from \"./42161/erc20.json\";\nimport bsc_tokens from \"./56/erc20.json\";\nimport cronos_tokens from \"./25/erc20.json\";\nimport ethereum_tokens from \"./1/erc20.json\";\nimport ethereum_goerli_tokens from \"./5/erc20.json\";\nimport ethereum_rinkeby_tokens from \"./4/erc20.json\";\nimport ethereum_ropsten_tokens from \"./3/erc20.json\";\nimport ethereum_sepolia_tokens from \"./11155111/erc20.json\";\nimport fantom_tokens from \"./250/erc20.json\";\nimport flare_tokens from \"./14/erc20.json\";\nimport moonbeam_tokens from \"./1284/erc20.json\";\nimport optimism_tokens from \"./10/erc20.json\";\nimport polygon_tokens from \"./137/erc20.json\";\nimport songbird_tokens from \"./19/erc20.json\";\nimport arbitrum_signatures from \"./42161/erc20-signatures.json\";\nimport bsc_signatures from \"./56/erc20-signatures.json\";\nimport cronos_signatures from \"./25/erc20-signatures.json\";\nimport ethereum_signatures from \"./1/erc20-signatures.json\";\nimport ethereum_goerli_signatures from \"./5/erc20-signatures.json\";\nimport ethereum_rinkeby_signatures from \"./4/erc20-signatures.json\";\nimport ethereum_ropsten_signatures from \"./3/erc20-signatures.json\";\nimport ethereum_sepolia_signatures from \"./11155111/erc20-signatures.json\";\nimport fantom_signatures from \"./250/erc20-signatures.json\";\nimport flare_signatures from \"./14/erc20-signatures.json\";\nimport moonbeam_signatures from \"./1284/erc20-signatures.json\";\nimport optimism_signatures from \"./10/erc20-signatures.json\";\nimport polygon_signatures from \"./137/erc20-signatures.json\";\nimport songbird_signatures from \"./19/erc20-signatures.json\";\n\nexport const tokens = {\n  42161: arbitrum_tokens,\n  56: bsc_tokens,\n  25: cronos_tokens,\n  1: ethereum_tokens,\n  5: ethereum_goerli_tokens,\n  4: ethereum_rinkeby_tokens,\n  3: ethereum_ropsten_tokens,\n  11155111: ethereum_sepolia_tokens,\n  250: fantom_tokens,\n  14: flare_tokens,\n  1284: moonbeam_tokens,\n  10: optimism_tokens,\n  137: polygon_tokens,\n  19: songbird_tokens,\n};\n\nexport const signatures = {\n  42161: arbitrum_signatures,\n  56: bsc_signatures,\n  25: cronos_signatures,\n  1: ethereum_signatures,\n  5: ethereum_goerli_signatures,\n  4: ethereum_rinkeby_signatures,\n  3: ethereum_ropsten_signatures,\n  11155111: ethereum_sepolia_signatures,\n  250: fantom_signatures,\n  14: flare_signatures,\n  1284: moonbeam_signatures,\n  10: optimism_signatures,\n  137: polygon_signatures,\n  19: songbird_signatures,\n};\n\nexport default {\n  tokens,\n  signatures,\n};\n","import axios from \"axios\";\nimport { getLoadConfig } from \"./loadConfig\";\nimport type { LoadConfig } from \"../types\";\nimport { log } from \"@ledgerhq/logs\";\n\ntype ContractMethod = {\n  payload: string;\n  signature: string;\n  plugin: string;\n  erc20OfInterest: string[];\n  abi: any;\n};\n\n/**\n * Retrieve the metadatas a given contract address and a method selector\n */\nexport const loadInfosForContractMethod = async (\n  contractAddress: string,\n  selector: string,\n  chainId: number,\n  userLoadConfig: LoadConfig\n): Promise<ContractMethod | undefined> => {\n  const { pluginBaseURL, extraPlugins } = getLoadConfig(userLoadConfig);\n\n  let data = {};\n\n  if (pluginBaseURL) {\n    const url = `${pluginBaseURL}/plugins/ethereum.json`;\n    data = await axios\n      .get(`${pluginBaseURL}/plugins/ethereum.json`)\n      .then((r) => r.data as any)\n      .catch((e) => {\n        log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n        return null;\n      });\n  }\n\n  if (extraPlugins) {\n    data = { ...data, ...extraPlugins };\n  }\n\n  if (!data) return;\n\n  const lcSelector = selector.toLowerCase();\n  const lcContractAddress = contractAddress.toLowerCase();\n\n  if (lcContractAddress in data) {\n    const contractSelectors = data[lcContractAddress];\n\n    if (lcSelector in contractSelectors) {\n      return {\n        payload: contractSelectors[lcSelector][\"serialized_data\"],\n        signature: contractSelectors[lcSelector][\"signature\"],\n        plugin: contractSelectors[lcSelector][\"plugin\"],\n        erc20OfInterest: contractSelectors[lcSelector][\"erc20OfInterest\"],\n        abi: contractSelectors[\"abi\"],\n      };\n    }\n  }\n};\n","import axios from \"axios\";\nimport { log } from \"@ledgerhq/logs\";\nimport { signatures as signaturesByChainId } from \"@ledgerhq/cryptoassets/data/evm/index\";\nimport { getLoadConfig } from \"./loadConfig\";\nimport { LoadConfig } from \"../types\";\n\nconst asContractAddress = (addr: string) => {\n  const a = addr.toLowerCase();\n  return a.startsWith(\"0x\") ? a : \"0x\" + a;\n};\n\nexport const findERC20SignaturesInfo = async (\n  userLoadConfig: LoadConfig,\n  chainId: number\n): Promise<string | null> => {\n  const { cryptoassetsBaseURL } = getLoadConfig(userLoadConfig);\n  if (!cryptoassetsBaseURL) return null;\n\n  const url = `${cryptoassetsBaseURL}/evm/${chainId}/erc20-signatures.json`;\n  const blob = await axios\n    .get<string>(url)\n    .then(({ data }) => {\n      if (!data || typeof data !== \"string\") {\n        throw new Error(\n          `ERC20 signatures for chainId ${chainId} file is malformed ${url}`\n        );\n      }\n      return data;\n    })\n    .catch((e) => {\n      log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n      return null;\n    });\n\n  return blob;\n};\n\n/**\n * Retrieve the token information by a given contract address if any\n */\nexport const byContractAddressAndChainId = (\n  contract: string,\n  chainId: number,\n  erc20SignaturesBlob?: string | null\n): ReturnType<API[\"byContractAndChainId\"]> => {\n  // If we are able to fetch data from s3 bucket that contains dynamic CAL\n  if (erc20SignaturesBlob) {\n    try {\n      return parse(erc20SignaturesBlob).byContractAndChainId(\n        asContractAddress(contract),\n        chainId\n      );\n    } catch (e) {\n      return get(chainId)?.byContractAndChainId(\n        asContractAddress(contract),\n        chainId\n      );\n    }\n  }\n\n  // the static fallback when dynamic cal is not provided\n  return get(chainId)?.byContractAndChainId(\n    asContractAddress(contract),\n    chainId\n  );\n};\n\nexport type TokenInfo = {\n  contractAddress: string;\n  ticker: string;\n  decimals: number;\n  chainId: number;\n  signature: Buffer;\n  data: Buffer;\n};\nexport type API = {\n  byContractAndChainId: (\n    addr: string,\n    id: number\n  ) => TokenInfo | null | undefined;\n  list: () => TokenInfo[];\n};\n\nconst parse = (erc20SignaturesBlob: string): API => {\n  const buf = Buffer.from(erc20SignaturesBlob, \"base64\");\n  const map = {};\n  const entries: TokenInfo[] = [];\n  let i = 0;\n\n  while (i < buf.length) {\n    const length = buf.readUInt32BE(i);\n    i += 4;\n    const item = buf.slice(i, i + length);\n    let j = 0;\n    const tickerLength = item.readUInt8(j);\n    j += 1;\n    const ticker = item.slice(j, j + tickerLength).toString(\"ascii\");\n    j += tickerLength;\n    const contractAddress = asContractAddress(\n      item.slice(j, j + 20).toString(\"hex\")\n    );\n    j += 20;\n    const decimals = item.readUInt32BE(j);\n    j += 4;\n    const chainId = item.readUInt32BE(j);\n    j += 4;\n    const signature = item.slice(j);\n    const entry: TokenInfo = {\n      ticker,\n      contractAddress,\n      decimals,\n      chainId,\n      signature,\n      data: item,\n    };\n    entries.push(entry);\n    map[String(chainId) + \":\" + contractAddress] = entry;\n    i += length;\n  }\n\n  return {\n    list: () => entries,\n    byContractAndChainId: (contractAddress, chainId) =>\n      map[String(chainId) + \":\" + contractAddress],\n  };\n};\n\n// this internal get() will lazy load and cache the data from the erc20 data blob\nconst get: (chainId: number) => API | null = (() => {\n  const cache: Record<number, API> = {};\n  return (chainId) => {\n    if (cache[chainId]) return cache[chainId];\n\n    const signatureBlob: string | undefined = signaturesByChainId[chainId];\n    if (!signatureBlob) return null;\n\n    const api = parse(signatureBlob);\n    cache[chainId] = api;\n    return api;\n  };\n})();\n","// This implements the resolution of a Transaction using Ledger's own API\nimport { log } from \"@ledgerhq/logs\";\nimport { Interface } from \"@ethersproject/abi\";\n\nimport {\n  LedgerEthTransactionResolution,\n  LedgerEthTransactionService,\n  LoadConfig,\n} from \"../types\";\nimport { loadInfosForContractMethod } from \"./contracts\";\nimport { byContractAddressAndChainId, findERC20SignaturesInfo } from \"./erc20\";\nimport { getNFTInfo, loadNftPlugin } from \"./nfts\";\nimport {\n  decodeTxInfo,\n  tokenSelectors,\n  nftSelectors,\n  mergeResolutions,\n} from \"../../utils\";\n\ntype potentialResolutions = {\n  token: boolean | undefined;\n  nft: boolean | undefined;\n  externalPlugins: boolean | undefined;\n};\n\n/**\n * @ignore for external documentation\n *\n * Providing additionnal data for some transactions (Token or NFT related) can enable clear signing\n * of initially impossible to decode data.\n * This method will add necessary APDUs to the resolution paramter in order to provide this data to the nano app\n */\nconst getAdditionalDataForContract = async (\n  contractAddress: string,\n  chainIdTruncated: number,\n  loadConfig: LoadConfig,\n  shouldResolve: potentialResolutions\n): Promise<Pick<LedgerEthTransactionResolution, \"nfts\" | \"erc20Tokens\">> => {\n  const resolution: Pick<\n    LedgerEthTransactionResolution,\n    \"nfts\" | \"erc20Tokens\"\n  > = {\n    nfts: [],\n    erc20Tokens: [],\n  };\n\n  if (shouldResolve.nft) {\n    const nftInfo = await getNFTInfo(\n      contractAddress,\n      chainIdTruncated,\n      loadConfig\n    );\n\n    if (nftInfo) {\n      log(\n        \"ethereum\",\n        \"loaded nft info for \" +\n          nftInfo.contractAddress +\n          \" (\" +\n          nftInfo.collectionName +\n          \")\"\n      );\n      resolution.nfts.push(nftInfo.data);\n    } else {\n      log(\"ethereum\", \"couldn't load nft info for \" + contractAddress);\n    }\n  }\n\n  if (shouldResolve.token) {\n    const erc20SignaturesBlob = await findERC20SignaturesInfo(\n      loadConfig,\n      chainIdTruncated\n    );\n    const erc20Info = byContractAddressAndChainId(\n      contractAddress,\n      chainIdTruncated,\n      erc20SignaturesBlob\n    );\n\n    if (erc20Info) {\n      log(\n        \"ethereum\",\n        \"loaded erc20token info for \" +\n          erc20Info.contractAddress +\n          \" (\" +\n          erc20Info.ticker +\n          \")\"\n      );\n      resolution.erc20Tokens.push(erc20Info.data.toString(\"hex\"));\n    } else {\n      log(\"ethereum\", \"couldn't load erc20token info for \" + contractAddress);\n    }\n  }\n\n  return resolution;\n};\n\n/**\n * @ignore for external documentation\n *\n * Depending on the transaction, it might be necessary to load internal plugins in the nano app\n * in order to clear sign it.\n * This method will add necessary APDUs to the resolution parameter in order to load those internal plugins\n */\nconst loadNanoAppPlugins = async (\n  contractAddress: string,\n  selector: string,\n  decodedTx,\n  chainIdTruncated: number,\n  loadConfig: LoadConfig,\n  shouldResolve: potentialResolutions\n): Promise<LedgerEthTransactionResolution> => {\n  let resolution: LedgerEthTransactionResolution = {\n    externalPlugin: [],\n    plugin: [],\n    nfts: [],\n    erc20Tokens: [],\n  };\n\n  if (shouldResolve.nft) {\n    const nftPluginPayload = await loadNftPlugin(\n      contractAddress,\n      selector,\n      chainIdTruncated,\n      loadConfig\n    );\n\n    if (nftPluginPayload) {\n      resolution.plugin.push(nftPluginPayload);\n    } else {\n      log(\n        \"ethereum\",\n        \"no NFT plugin payload for selector \" +\n          selector +\n          \" and address \" +\n          contractAddress\n      );\n    }\n  }\n\n  if (shouldResolve.externalPlugins) {\n    const contractMethodInfos = await loadInfosForContractMethod(\n      contractAddress,\n      selector,\n      chainIdTruncated,\n      loadConfig\n    );\n\n    if (contractMethodInfos) {\n      const { plugin, payload, signature, erc20OfInterest, abi } =\n        contractMethodInfos;\n\n      if (plugin) {\n        log(\"ethereum\", \"found plugin for \" + selector);\n        resolution.externalPlugin.push({ payload, signature });\n      }\n\n      if (erc20OfInterest && erc20OfInterest.length && abi) {\n        const contract = new Interface(abi);\n        const args = contract.parseTransaction(decodedTx).args;\n\n        for (const path of erc20OfInterest) {\n          const erc20ContractAddress = path.split(\".\").reduce((value, seg) => {\n            if (seg === \"-1\" && Array.isArray(value)) {\n              return value[value.length - 1];\n            }\n            return value[seg];\n          }, args) as unknown as string; // impossible(?) to type correctly as the initializer is different from the returned type\n\n          const externalPluginResolution = await getAdditionalDataForContract(\n            erc20ContractAddress,\n            chainIdTruncated,\n            loadConfig,\n            {\n              nft: false,\n              externalPlugins: false,\n              token: true, // enforcing resolution of tokens for external plugins that need info on assets (e.g. for a swap)\n            }\n          );\n          resolution = mergeResolutions(resolution, externalPluginResolution);\n        }\n      }\n    } else {\n      log(\"ethereum\", \"no infos for selector \" + selector);\n    }\n  }\n\n  return resolution;\n};\n\nconst ledgerService: LedgerEthTransactionService = {\n  resolveTransaction: async (rawTxHex, loadConfig, resolutionConfig) => {\n    const rawTx = Buffer.from(rawTxHex, \"hex\");\n    const { decodedTx, chainIdTruncated } = decodeTxInfo(rawTx);\n\n    const contractAddress = decodedTx.to;\n    const selector =\n      decodedTx.data.length >= 10 && decodedTx.data.substring(0, 10);\n\n    let pluginsResolution: Partial<LedgerEthTransactionResolution> = {};\n    let contractResolution: Partial<LedgerEthTransactionResolution> = {};\n    if (selector) {\n      const shouldResolve: potentialResolutions = {\n        token: resolutionConfig.erc20 && tokenSelectors.includes(selector),\n        nft: resolutionConfig.nft && nftSelectors.includes(selector),\n        externalPlugins: resolutionConfig.externalPlugins,\n      };\n\n      pluginsResolution = await loadNanoAppPlugins(\n        contractAddress,\n        selector,\n        decodedTx,\n        chainIdTruncated,\n        loadConfig,\n        shouldResolve\n      );\n\n      contractResolution = await getAdditionalDataForContract(\n        contractAddress,\n        chainIdTruncated,\n        loadConfig,\n        shouldResolve\n      );\n    }\n\n    return mergeResolutions(pluginsResolution, contractResolution);\n  },\n};\n\nexport default ledgerService;\n","import type { LoadConfig } from \"../types\";\n\nconst defaultLoadConfig = {\n  nftExplorerBaseURL: \"https://nft.api.live.ledger.com/v1/ethereum\",\n  pluginBaseURL: \"https://cdn.live.ledger.com\",\n  extraPlugins: null,\n  cryptoassetsBaseURL: \"https://cdn.live.ledger.com/cryptoassets\",\n};\n\nexport function getLoadConfig(userLoadConfig?: LoadConfig): LoadConfig {\n  return {\n    ...defaultLoadConfig,\n    ...userLoadConfig,\n  };\n}\n","import axios from \"axios\";\nimport { getLoadConfig } from \"./loadConfig\";\nimport type { LoadConfig } from \"../types\";\nimport { log } from \"@ledgerhq/logs\";\n\ntype NftInfo = {\n  contractAddress: string;\n  collectionName: string;\n  data: string;\n};\n\ntype BackendResponse = {\n  payload: string;\n};\n\nexport const getNFTInfo = async (\n  contractAddress: string,\n  chainId: number,\n  userLoadConfig: LoadConfig\n): Promise<NftInfo | undefined> => {\n  const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);\n  if (!nftExplorerBaseURL) return;\n  const url = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}`;\n  const response = await axios\n    .get<BackendResponse>(url)\n    .then((r) => r.data)\n    .catch((e) => {\n      log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n      return null;\n    });\n  if (!response) return;\n\n  // APDU response specification: https://ledgerhq.atlassian.net/wiki/spaces/WALLETCO/pages/3269984297/NFT-1+NFT+Backend+design#NFT-Metadata-BLOB\n  const payload = response[\"payload\"];\n  // Collection name length position: 3rd byte -> caracter 4 to 6\n  const collectionNameLength = parseInt(payload.slice(4, 6), 16);\n  const collectionNameHex = payload.substr(6, collectionNameLength * 2);\n  const collectionName = collectionNameHex\n    .match(/.{2}/g) // split every 2 characters\n    ?.reduce(\n      (acc, curr) => (acc += String.fromCharCode(parseInt(curr, 16))),\n      \"\"\n    ); // convert hex to string\n\n  return {\n    contractAddress: contractAddress,\n    collectionName: collectionName || \"\",\n    data: payload,\n  };\n};\n\nexport const loadNftPlugin = async (\n  contractAddress: string,\n  selector: string,\n  chainId: number,\n  userLoadConfig: LoadConfig\n): Promise<string | undefined> => {\n  const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);\n  if (!nftExplorerBaseURL) return;\n  const url = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}/plugin-selector/${selector}`;\n\n  const response = await axios\n    .get<BackendResponse>(url)\n    .then((r) => r.data)\n    .catch((e) => {\n      log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n      return null;\n    });\n  if (!response) return;\n\n  const payload = response[\"payload\"];\n  return payload;\n};\n","import { encode, decode } from \"@ethersproject/rlp\";\nimport { BigNumber } from \"bignumber.js\";\nimport { LedgerEthTransactionResolution } from \"./services/types\";\n\nexport function splitPath(path: string): number[] {\n  const result: number[] = [];\n  const components = path.split(\"/\");\n  components.forEach((element) => {\n    let number = parseInt(element, 10);\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n    result.push(number);\n  });\n  return result;\n}\n\nexport function hexBuffer(str: string): Buffer {\n  return Buffer.from(str.startsWith(\"0x\") ? str.slice(2) : str, \"hex\");\n}\n\nexport function maybeHexBuffer(\n  str: string | null | undefined\n): Buffer | null | undefined {\n  if (!str) return null;\n  return hexBuffer(str);\n}\n\nexport const decodeTxInfo = (rawTx: Buffer) => {\n  const VALID_TYPES = [1, 2];\n  const txType = VALID_TYPES.includes(rawTx[0]) ? rawTx[0] : null;\n  const rlpData = txType === null ? rawTx : rawTx.slice(1);\n  const rlpTx = decode(rlpData).map((hex) => Buffer.from(hex.slice(2), \"hex\"));\n  let chainIdTruncated = 0;\n  const rlpDecoded = decode(rlpData);\n\n  let decodedTx;\n  if (txType === 2) {\n    // EIP1559\n    decodedTx = {\n      data: rlpDecoded[7],\n      to: rlpDecoded[5],\n      chainId: rlpTx[0],\n    };\n  } else if (txType === 1) {\n    // EIP2930\n    decodedTx = {\n      data: rlpDecoded[6],\n      to: rlpDecoded[4],\n      chainId: rlpTx[0],\n    };\n  } else {\n    // Legacy tx\n    decodedTx = {\n      data: rlpDecoded[5],\n      to: rlpDecoded[3],\n      // Default to 1 for non EIP 155 txs\n      chainId: rlpTx.length > 6 ? rlpTx[6] : Buffer.from(\"0x01\", \"hex\"),\n    };\n  }\n\n  const chainIdSrc = decodedTx.chainId;\n  let chainId = new BigNumber(0);\n  if (chainIdSrc) {\n    // Using BigNumber because chainID could be any uint256.\n    chainId = new BigNumber(chainIdSrc.toString(\"hex\"), 16);\n    const chainIdTruncatedBuf = Buffer.alloc(4);\n    if (chainIdSrc.length > 4) {\n      chainIdSrc.copy(chainIdTruncatedBuf);\n    } else {\n      chainIdSrc.copy(chainIdTruncatedBuf, 4 - chainIdSrc.length);\n    }\n    chainIdTruncated = chainIdTruncatedBuf.readUInt32BE(0);\n  }\n\n  let vrsOffset = 0;\n  if (txType === null && rlpTx.length > 6) {\n    const rlpVrs = Buffer.from(encode(rlpTx.slice(-3)).slice(2), \"hex\");\n\n    vrsOffset = rawTx.length - (rlpVrs.length - 1);\n\n    // First byte > 0xf7 means the length of the list length doesn't fit in a single byte.\n    if (rlpVrs[0] > 0xf7) {\n      // Increment vrsOffset to account for that extra byte.\n      vrsOffset++;\n\n      // Compute size of the list length.\n      const sizeOfListLen = rlpVrs[0] - 0xf7;\n\n      // Increase rlpOffset by the size of the list length.\n      vrsOffset += sizeOfListLen - 1;\n    }\n  }\n\n  return {\n    decodedTx,\n    txType,\n    chainId,\n    chainIdTruncated,\n    vrsOffset,\n  };\n};\n\n/**\n * @ignore for the README\n *\n * Helper to convert an integer as a hexadecimal string with the right amount of digits\n * to respect the number of bytes given as parameter\n *\n * @param int Integer\n * @param bytes Number of bytes it should be represented as (1 byte = 2 caraters)\n * @returns The given integer as an hexa string padded with the right number of 0\n */\nexport const intAsHexBytes = (int: number, bytes: number): string =>\n  int.toString(16).padStart(2 * bytes, \"0\");\n\n/**\n * @ignore for the README\n *\n * List of selectors (hexadecimal representation of the used method's signature) related to\n * ERC20 (Tokens), ERC721/ERC1155 (NFT).\n * You can verify and/or get more info about them on http://4byte.directory\n */\n\nexport enum ERC20_CLEAR_SIGNED_SELECTORS {\n  APPROVE = \"0x095ea7b3\",\n  TRANSFER = \"0xa9059cbb\",\n}\n\nexport enum ERC721_CLEAR_SIGNED_SELECTORS {\n  APPROVE = \"0x095ea7b3\",\n  SET_APPROVAL_FOR_ALL = \"0xa22cb465\",\n  TRANSFER_FROM = \"0x23b872dd\",\n  SAFE_TRANSFER_FROM = \"0x42842e0e\",\n  SAFE_TRANSFER_FROM_WITH_DATA = \"0xb88d4fde\",\n}\n\nexport enum ERC1155_CLEAR_SIGNED_SELECTORS {\n  SET_APPROVAL_FOR_ALL = \"0xa22cb465\",\n  SAFE_TRANSFER_FROM = \"0xf242432a\",\n  SAFE_BATCH_TRANSFER_FROM = \"0x2eb2c2d6\",\n}\n\nexport const tokenSelectors = Object.values(ERC20_CLEAR_SIGNED_SELECTORS);\nexport const nftSelectors = [\n  ...Object.values(ERC721_CLEAR_SIGNED_SELECTORS),\n  ...Object.values(ERC1155_CLEAR_SIGNED_SELECTORS),\n];\n\nexport const mergeResolutions = (\n  oldResolution: Partial<LedgerEthTransactionResolution>,\n  newResolution: Partial<LedgerEthTransactionResolution>\n): LedgerEthTransactionResolution => {\n  const resolutions: LedgerEthTransactionResolution = {\n    nfts: [],\n    erc20Tokens: [],\n    externalPlugin: [],\n    plugin: [],\n  };\n\n  for (const key in oldResolution) {\n    resolutions[key].push(...oldResolution[key]);\n  }\n\n  for (const key in newResolution) {\n    resolutions[key].push(...newResolution[key]);\n  }\n\n  return resolutions;\n};\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n"],"names":["exports","erc20_json_1","erc20_json_2","erc20_json_3","erc20_json_4","erc20_json_5","erc20_json_6","erc20_json_7","erc20_json_8","erc20_json_9","erc20_json_10","erc20_json_11","erc20_json_12","erc20_json_13","erc20_json_14","erc20_signatures_json_1","erc20_signatures_json_2","erc20_signatures_json_3","erc20_signatures_json_4","erc20_signatures_json_5","erc20_signatures_json_6","erc20_signatures_json_7","erc20_signatures_json_8","erc20_signatures_json_9","erc20_signatures_json_10","erc20_signatures_json_11","erc20_signatures_json_12","erc20_signatures_json_13","erc20_signatures_json_14","tokens","signatures","contractAddress","selector","chainId","userLoadConfig","_a","getLoadConfig","pluginBaseURL","extraPlugins","data","url_1","axios_1","get","then","r","e","log","String","_b","lcSelector","toLowerCase","lcContractAddress","contractSelectors","payload","signature","plugin","erc20OfInterest","abi","asContractAddress","addr","a","startsWith","cryptoassetsBaseURL","url","Error","contract","erc20SignaturesBlob","parse","byContractAndChainId","buf","Buffer","from","map","entries","i","length","length_1","readUInt32BE","item","slice","j","tickerLength","readUInt8","ticker","toString","decimals","entry","push","list","cache","signatureBlob","index_1","api","getAdditionalDataForContract","chainIdTruncated","loadConfig","shouldResolve","resolution","nfts","erc20Tokens","nft","getNFTInfo","nftInfo","collectionName","token","findERC20SignaturesInfo","erc20Info","byContractAddressAndChainId","loadNanoAppPlugins","decodedTx","externalPlugin","loadNftPlugin","nftPluginPayload","externalPlugins","loadInfosForContractMethod","contractMethodInfos","abi_1","args","parseTransaction","erc20OfInterest_1","path","erc20ContractAddress","split","reduce","value","seg","Array","isArray","externalPluginResolution","mergeResolutions","ledgerService","resolveTransaction","rawTxHex","resolutionConfig","rawTx","decodeTxInfo","to","substring","pluginsResolution","contractResolution","erc20","utils_1","includes","defaultLoadConfig","nftExplorerBaseURL","response","collectionNameLength","parseInt","collectionNameHex","substr","match","acc","curr","fromCharCode","hexBuffer","str","result","forEach","element","number","isNaN","txType","rlpData","rlpTx","decode","hex","rlpDecoded","chainIdSrc","bignumber_js_1","chainIdTruncatedBuf","alloc","copy","vrsOffset","rlpVrs","encode","ERC20_CLEAR_SIGNED_SELECTORS","ERC721_CLEAR_SIGNED_SELECTORS","ERC1155_CLEAR_SIGNED_SELECTORS","int","bytes","padStart","Object","values","oldResolution","newResolution","resolutions","key","globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","coeffToString","s","z","charCodeAt","compare","x","y","b","xc","c","yc","k","l","intCheck","min","max","name","isOdd","toExponential","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","P","prototype","constructor","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","indexOf","replace","search","round","DEBUG","toUpperCase","format","rm","id","c0","ne","maxOrMin","method","m","call","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","define"],"sourceRoot":""}